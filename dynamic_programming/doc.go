package dynamic_programming

// 动态规划算法：和贪心算法一样，一般用来求解最优化问题

// 分治法：将问题划分为 互不相交 的子问题，递归的求解子问题，再将其解组合起来
// 动态规划：子问题有重叠（不同的子问题具有公共的子子问题），每个子子问题只求解一次

// 一般步骤：
// 1. 刻画最优解的结构特征
// 2. 递归地定义最优解的值（递归式）
// 3. 计算最优解的值，（通常采用自底向上的方式）
// 3-1. 带备忘的自顶向下
// 3-2. 自底向上
// 4. 构造出最优解

// 最优子结构性质：
// 1. 做出一个选择，这次选择会产生一个或多个待解决的子问题
// 2. 对于一个问题，在其可能的第一步选择中，假定已经知道了哪种选择会得到最优解
// 3. 给定可以获得最优解的选择后，再确定这次选择会产生哪些子问题
// 4. 作为构成原问题的最优解的组成部分，每个子问题的解就是它本身的最优解
// 5. 子问题之间资源是不共享的（如无权有向图最长路径子问题之间会共享顶点）

const (
	minInt = ^int(^uint(0) >> 1)
)
